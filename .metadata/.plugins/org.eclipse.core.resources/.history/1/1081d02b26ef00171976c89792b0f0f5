
public class Solution12 {

	public static void main(String[] args) {
		double[] input = {2.0, -0.1, 4, -2, -1.5};
		System.out.println(largestProduct(input));
	}
	
	/*
	 * Base case: 
	 * dp[0] = 1;
	 * Induction Rule: 
	 * dp[i] = do[j] * dp[j+1] * ... dp[i] where dp[j] is the previous double number that is smaller than 1  
	 */
	public static double largestProduct(double[] array) {
		double[] dp = new double[array.length + 1];
		dp[0] = 1;
		int start = 0;
		int end = 0;
		double doubleMax = 1;
		for(int i = 0 ; i < array.length ; i++) {
			if (array[i] > -1 && array[i] < 1) {
				
			}
		}
	}
	
	static class Unit implements Comparable<Unit> {
		double max;
		boolean positive;
		int start;
		int end;
		public Unit(double max, boolean positive, int start, int end) {
			this.max = max;
			this.positive = positive;
			this.start = start;
			this.end = end;
		}
		@Override
		public int compareTo(Unit other) {
			if (this.max == other.max) {
				return 0;
			}
			return this.max > other.max ? -1 : 1;
		}
	}
}
