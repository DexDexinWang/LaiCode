
public class Solution12 {

	public static void main(String[] args) {
		String s = "abcbdabcd";
		String target = "abcd";
		System.out.println(ShortestTargetSubSequence(s,target));
	}
	
	//DP
	//dp[i][j] represent the longest mathed subsequence
	//dp[i][0] = 0;
	//dp[0][j] = 0
	//dp[i][j] = dp[][]
	public static int ShortestTargetSubSequence(String s, String t) {
		if (s == null || s.length() == 0 || t == null || t.length() == 0) {
			return -1;
		}
		int minLen = Integer.MAX_VALUE;
		int len1 = s.length();
		int len2 = t.length();
		int[][] dp = new int[len2 + 1][len1 + 1];
		int start = 0;
		for(int i = 0; i <= len2; i++) {
			for (int j = 0; j <= len1; j++) {
				if (i == 0 || j == 0) {
					dp[i][j] = 0;
				} else if(t.charAt(i - 1) == s1.charAt(j - 1)) {
					dp[i][j] = dp[i][j] + 1;
				} else {
					dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
				}
				if (dp[i][j] == 1) {
					start = j;
				} else if (dp[i][j] == len2) {
					minLen = Math.max(minLen, j - start + 1);
				}
			}
		}
		System.out.println(dp[len2][len1]);
		return minLen == Integer.MAX_VALUE? - 1 : minLen;
	}

}
