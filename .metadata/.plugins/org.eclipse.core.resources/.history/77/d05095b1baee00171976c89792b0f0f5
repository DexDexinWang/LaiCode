import java.util.PriorityQueue;

public class Solution10 {

	public static void main(String[] args) {
		int[] input = {3,4,1,2,7,6};
		System.out.println(maxProfit(input));
	}
	
	/**
	 * Base case: 
	 * dp[0] = 0;
	 * Induction Rule:
	 * dp[i] represents the local maximum profit from the last minimum price.
	 * dp[i] = dp[i] + array[i] - array[i - 1] 	where array[i - 1] <= array[i];
	 * dp[i] = 0								otherwise;
	 * @param array
	 * @return
	 */
	
	public static int maxProfit(int[] array) {
		PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();
		int[] dp = new int[array.length];
		dp[0] = 0;
		for (int i = 1 ; i <= array.length; i++) {
			if (array[i - 1] <= array[i]) {
				dp[i] = dp[i - 1] + array[i] - array[i - 1];
			} else {
				
				dp[i] = 0;
			}
		}
	}
	
	private static int pollMinHeap(PriorityQueue<Integer> minHeap, int num) {
		
	}

}
