import java.util.ArrayList;
import java.util.List;

public class Solution3 {

	public static void main(String[] args) {
		int[][] input = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};
		System.out.println(spiral(input));
		System.out.println(spiral1(input));
	}
	//what: iteratively traverse nodes from the outer most cycle to inner most cycle.
	public static List<Integer> spiral1(int[][] matrix) {
		List<Integer> res = new ArrayList<Integer>();
		//define boundaries
		int left = 0; 
		int right = matrix.length - 1;
		int up = 0;
		int down = matrix[0].length - 1;
		//check each cycles
		while (left < right && up < down) {
			for (int i = left ; i <= right ; i++) {
				res.add(matrix[up][i]);
			}
			for (int i = up + 1 ; i <= down - 1 ; i++) {
				res.add(matrix[i][right]);
			}
			for (int i = right ; i >= left ; i--) {
				res.add(matrix[down][i]);
			}
			for (int i = down - 1 ; i >= up + 1 ; i--) {
				res.add(matrix[i][left]);
			}
			left++;
			up++;
			right--;
			down--;	
		}
		//check there is no element left;
		if (left > right || up > down) {
			return res;
		}
		//if there is a row or a column or an element then add them.
		if (left == right) {
			for (int i = up; i <= down; i++) {
				res.add(matrix[i][left]);
			}
		}
		else {
			for (int i = left; i <= right; i++) {
				res.add(matrix[up][i]);
			}
		}
		return res;
	}
	//Time complexity: O(n*m);
	//Spcae complexity: O(n*m);
	

	public static List<Integer> spiral(int[][] matrix) {
		List<Integer> res = new ArrayList<Integer>();
		spiralHelper(matrix, 0, matrix.length, matrix[0].length, res);
		return res;
	}
	
	public static void spiralHelper(int[][] matrix, int offset, int row, int col, List<Integer> res) {
		
	}
}
