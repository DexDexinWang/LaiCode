import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;
import java.util.List;

public class Solution3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public List<Integer> maxWindows(int[] array, int k) {
		List<Integer> res = new ArrayList<>();
		for(int i = 0 ; i <= array.length - k; i++) {
			int max = array[i];
			for(int j = 1; j < k; j++) {
				if (array[i + j] > max) {
					max = array[i + j];
				}
			}
			res.add(max);
		}
		return res;
	}
	//Time Complexity: O(n ^ 2);
	//Space Compelxity:O(1);

	public List<Integer> maxWindows1(int[] array, int k) {
		List<Integer> res = new ArrayList<>();
		Deque<Integer> deque = new LinkedList<Integer>();
		for(int i = 0; i < k; i++) {
			while(!deque.isEmpty() && array[i] >= array[deque.peekLast()]) {
				deque.pollLast();
			}
			deque.offerLast(i);
		}
		return res;
	}
}
