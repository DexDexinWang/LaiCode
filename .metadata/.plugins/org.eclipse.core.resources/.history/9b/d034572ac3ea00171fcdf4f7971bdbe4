import generator.TreeRandom;
import generator.TreeNode;

public class BinarySearchTreeOperations {

	public static void main(String[] args) {
		TreeNode input = new TreeNode(5);
		input.left = new TreeNode(3);
		input.left.left = new TreeNode(2);
		input.left.right = new TreeNode(4);
		input.right = new TreeNode(9);
		input.right.left = new TreeNode(6);
		input.right.right = new TreeNode(10);		
		input.print();
		System.out.println();
		System.out.println(recursiveSearch(input, 3));
		System.out.println(iterativeSearch(input, 3));
	}

	private static boolean recursiveSearch(TreeNode root, int target) {
		if (root == null) {
			return false;
		} else if (root.key == target) {
			return true;
		} else if (root.key > target) {
			return recursiveSearch(root.left, target);
		} else {
			return recursiveSearch(root.right, target);
		}
	}
	
	private static TreeNode recursiveSearchNode(TreeNode root, int target) {
		if (root == null) {
			return null;
		} else if (root.key == target) {
			return root;
		} else if (root.key > target) {
			return recursiveSearch(root.left, target);
		} else {
			return recursiveSearch(root.right, target);
		}
	}
	
	
	private static boolean iterativeSearch(TreeNode root, int target) {
		while (root != null) {
			 if (root.key == target) {
				return true;
			} else if (root.key > target) {
				root = root.left;
			} else {
				root = root.right;
			}
		}
		return false;
	}
	
	private static TreeNode iterativeSearchNode(TreeNode root, int target) {
		while (root != null) {
			 if (root.key == target) {
				return root;
			} else if (root.key > target) {
				root = root.left;
			} else {
				root = root.right;
			}
		}
		return null;
	}
}
