import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

public class Solution1 {

	public static void main(String[] args) {
		int[] input = {2,3,4,3,5,6};
		System.out.println(Arrays.toString(kSmallest(input,4)));
	}
	
	//what: traverse each number check whehter it is in the most k smallest result.
	public static int[] kSmallest(int[] array, int k) {
	    if (array.length ==0 || k == 0) {
	        return new int[0];
	      }
	  		PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer> (k ,
	  				new Comparator<Integer>() {
	  			@Override
	  			public int compare(Integer e1, Integer e2) {
	  				if (e1.equals(e2)) {
	  					return 0;
	  				}
	  				return e1 > e2 ? -1 : 1;
	  			}
	  		});
	  		for (int i = 0 ; i < array.length ; i++) {
	        if (i < k) {
	          maxHeap.offer(array[i]);
	        } else if (array[i] < maxHeap.peek())  {
	          maxHeap.poll();
	          maxHeap.offer(array[i]);
	        }
	      }
	      
	      int[] res = new int[maxHeap.size()];
	      for (int i = maxHeap.size() - 1 ; i >= 0 ; i--) {
	        array[i] = maxHeap.poll();
	      }
	      
	      return res;
	}
	//Time Complexity: O(nlog(k))
	//Space Complexity: O(k)

}
