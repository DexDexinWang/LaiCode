
public class Solution1 {

	public static void main(String[] args) {
		int[] input = {1,2,4,5,5,1,3,2};
		System.out.println(minJump(input));
	}
	
	/**
	 * Base Case: M[len - 1] = 0;
	 * Induction Rules: 
	 * 1. M[i] = the minimum number of steps to move from ith to nth position.
	 * 2. M[i] = min(M[j]) +1   where j > i and j can be reached from i by only one jump. 
	 * @param array
	 * @return
	 */
	public static int minJump(int[] array) {
		if (array.length <= 1) {
			return 0;
		}
		int[] M = new int[array.length];
		M[array.length - 1] = 0;
		for (int i = array.length -2 ; i >= 0 ; i--) {
			int curMin = Integer.MAX_VALUE;
			for (int j = i + 1 ; j <= array[i] + i && j < array.length; j++) {
				curMin = Math.min(curMin, array[j]);
			}
			M[i] = curMin + 1;
		}
		return M[0] == 0 ? -1 : M[0];
	}


}
