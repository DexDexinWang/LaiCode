
public class Solution4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	
	  //approach: use priorityQueue to order it.
	  public ListNode merge(List<ListNode> listOfLists) {
	    int rows = listOfLists.size();
	    PriorityQueue<ListNode> minHeap = new PriorityQueue<ListNode>(rows,
	    new Comparator<ListNode>() {
	      @Override
	      public int compare(ListNode l1, ListNode l2) {
	        return l1.value.compareTo(l2.value);
	      }
	    });
	    for (int i = 0; i < rows; i++) {
	      ListNode cur = listOfLists.get(i);
	      if (cur != null) {
	        minHeap.offer(cur);
	      }
	    }
	    
	    ListNode dummy = new ListNode(-1);
	    ListNode current = dummy;
	    
	    while(minHeap.size()!= 0) {
	      current.next = minHeap.poll();
	      current = current.next;
	      if (current.next != null) {
	        minHeap.offer(current.next);
	      }
	    }
	    return dummy.next;
	  }

}
