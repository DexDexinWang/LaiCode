
public class Solution8 {
/*
Given a integer dictionary A of unknown size, where the numbers in the dictionary are sorted in ascending order, determine if a given target integer T is in the dictionary. Return the index of T in A, return -1 if T is not in A.

Assumptions

dictionary A is not null
dictionary.get(i) will return null(Java)/INT_MIN(C++) if index i is out of bounds
Examples

A = {1, 2, 5, 9, ......}, T = 5, return 2
A = {1, 2, 5, 9, 12, ......}, T = 7, return -1
 */
	public static void main(String[] args) {
		System.out.println();
	}
	
	//what: find a number in unknow sorted aray with binary search.
	public static int search(Dictionary dict, int target) {
		//how: 1. corner case
		if (dict == null) {
			return -1;
		}
		//2. extend the range to cover values in dict.
		int left =0;
		int right = 1;
		while (dict.get(right) != null && dict.get(right) < target) {
			left = right;
			right = right * 2;
		}
		//3. find the number with binary search 
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (dict.get(mid) == null || dict.get(mid) > target) {
				right = mid
			} else if (dict.get(mid) < target) {
				left = mid;
			} else {
				right = mid;
			}
		}
		return -1;
	}
	

	interface Dictionary {
		public Integer get(int index);
	}
}


