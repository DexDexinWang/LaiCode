
public class Solution3 {

	public static void main(String[] args) {
		int[] input = {2,4,3,1,6,1,1,1,0};
		System.out.println(canJump(input));
	}
	
	/**
	 * Base case: M[n] = true;
	 * Induction Rule: 
	 * 1. M[i] = represents whether the current directly or indirectly jump to the last element from ith to nth.
	 * 2. M[i] = true 			where the ith element could jump to jth element and jth element is true;
	 * 	  	   = false 			otherwise
	 * @param array
	 * @return
	 */
	public static boolean canJump(int[] array) {
		if (array.length <= 1) {
			return true;
		}
		boolean[] record = new boolean[array.length];
		record[array.length - 1] = true;
		for (int i = array.length - 2 ; i >= 0 ; i--) {
			if (checkNextIth(record, i, array[i])) {
				record[i] = true;
			}
			else {
				record[i] = false;
			}
		}
		return record[0];
	}
	
	private static boolean checkNextIth(boolean[] record, int cur, int next) {
		for(int i = cur + 1; i <= cur + next; i++) {
			if (record[i]) {
				return true;
			}
		}
		return false;
	}

	//time complexity: O(n^k) where k is the largest valeu in A[n]
	//space complexity: O(n)
	
	public static boolean canJump1(int[] array) {
	    if (array.length == 1) {
	        return true;
	      }
	      int len = array.length;
	      boolean[] dp = new boolean[len];
	      dp[len - 1] = true;
	      for (int i = len - 2; i >= 0; i--) {
	        for (int j = i + 1 ; j < len && j <= array[i] + i; j++) {
	          if(dp[j]) {
	            dp[i] = true;
	            break;
	          }
	        }
	      }
	      return dp[0];
	}
	
	 public boolean canJump(int[] array) {
		    // Write your solution here.
		    //dp[i] keep the longest position till i-th element
		    // 0 1 2 3 4 5 
		    // 4 2 1 1 0 4
		    // 4 4 4 4 4
		    if(array.length == 1) {
		      return true;
		    }
		    int[] dp = new int[array.length];
		    dp[0] = array[0];
		    for(int i = 1; i <= dp[i - 1]; i++) {
		      //               4,       2+1=3
		      dp[i] = Math.max(dp[i - 1] , array[i] + i);
		      if(dp[i] >= array.length - 1) {
		        return true;
		      }
		    }
		    return false;
		  }

}
