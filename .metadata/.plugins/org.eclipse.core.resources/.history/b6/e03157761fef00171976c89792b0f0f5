
public class Solution15 {

	public static void main(String[] args) {
		System.out.println(numOfTrees(0));
	}

	/**
	 * Base Case:
	 * dp[0] = 1;
	 * dp[1] = 1;
	 * 
	 * Induction Rule:
	 * dp[i] = represent the maximum number of different BST generated for i;
	 * dp[i] = 2 * sum(dp[j]) 					where (i/2) <= j < i and n is even
	 * 		 = 2 * sum(dp[j]) + dp[i-(i+1/2)]	where (i/2) <= j < i and n is odd
	 * @param n
	 * @return
	 */
	public static int numOfTrees(int n) {
		if (n <= 1) {
			return 1;
		} else if (n == 2) {
			return 2;
		} else if (n == 3) {
			return 5;
		}
		int[] dp = new int[n + 1];
		dp[0] = 1;
		dp[1] = 1;
		dp[2] = 2;
		dp[3] = 5;
		if (n <= 3) {
      return dp[n];
    }
		for (int i = 4 ; i <= n ; i++) {
			for(int j = 1; j <= (i + 1)/2 ; j++) {
				dp[i] += dp[i -j];
			}
			dp[i] *= 2;
		}
		return dp[n];
	}

}
