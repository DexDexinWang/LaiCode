import generator.TreeRandom;
import generator.TreeNode;

public class BinarySearchTreeOperations {

	public static void main(String[] args) {
		TreeNode input = new TreeNode(5);
		input.left = new TreeNode(3);
		input.left.left = new TreeNode(2);
		input.left.right = new TreeNode(4);
		input.right = new TreeNode(9);
		input.right.left = new TreeNode(6);
		input.right.right = new TreeNode(10);		
		input.print();
		System.out.println();
		System.out.println(recursiveSearch(input, 3));
		System.out.println(iterativeSearch(input, 3));
		System.out.println(recursiveSearchNode(input, 3));
		System.out.println(iterativeSearchNode(input, 3));
		System.out.println(recursiveInsertNode(input, 1));
		System.out.println(iterativeInsertNode(input, 30));
		input.print();
		System.out.println();
	}

	//4 search methods
	private static boolean recursiveSearch(TreeNode root, int target) {
		if (root == null) {
			return false;
		} else if (root.key == target) {
			return true;
		} else if (root.key > target) {
			return recursiveSearch(root.left, target);
		} else {
			return recursiveSearch(root.right, target);
		}
	}
	
	private static TreeNode recursiveSearchNode(TreeNode root, int target) {
		if (root == null) {
			return null;
		} else if (root.key == target) {
			return root;
		} else if (root.key > target) {
			return recursiveSearchNode(root.left, target);
		} else {
			return recursiveSearchNode(root.right, target);
		}
	}
	
	private static boolean iterativeSearch(TreeNode root, int target) {
		while (root != null) {
			 if (root.key == target) {
				return true;
			} else if (root.key > target) {
				root = root.left;
			} else {
				root = root.right;
			}
		}
		return false;
	}
	
	private static TreeNode iterativeSearchNode(TreeNode root, int target) {
		while (root != null) {
			 if (root.key == target) {
				return root;
			} else if (root.key > target) {
				root = root.left;
			} else {
				root = root.right;
			}
		}
		return null;
	}
	
	//Insert
	private static TreeNode iterativeInsertNode(TreeNode root, int target) {
		TreeNode newNode = new TreeNode(target);
		if (root == null) {
			return newNode;
		}
		TreeNode cur = root;
		while (cur.key != target) {
			if (cur.key > target) {
				if (cur.left == null) {
					cur.left = newNode;
					break;
				} else {
					cur = cur.left;
				}
			} else {
				if (cur.right == null) {
					cur.right = newNode;
					break;
				} else {
					cur = cur.right;
				}
			}
		}
		return root;
	}
	
	private static TreeNode recursiveInsertNode(TreeNode root, int target) {
		if (root == null) {
			TreeNode newNode = new TreeNode(target);
			return newNode;
		}
		if (root.key < target) {
			root.left = recursiveInsertNode(root.left, target);
		} else {
			root.right = recursiveInsertNode(root.right,target);
		}
		return root;
	}
}
