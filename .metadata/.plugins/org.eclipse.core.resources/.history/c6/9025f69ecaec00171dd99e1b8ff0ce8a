
public class Solution3 {

	public static void main(String[] args) {
		int[] input = {1,4,5,1,2,4,1,4,7};
		System.out.println(canJump(input));
	}
	
	/**
	 * Base case: M[n] = true;
	 * Induction Rule: 
	 * 1. M[i] = represents whether the current directly or indirectly jump to the last element from ith to nth.
	 * 2. M[i] = true 			where the ith element could jump to jth element and jth element is true;
	 * 	  	   = false 			otherwise
	 * @param array
	 * @return
	 */
	public static boolean canJump(int[] array) {
		if (array.length <= 1) {
			return true;
		}
		boolean[] record = new boolean[array.length];
		record[array.length - 1] = true;
		for (int i = array.length - 2 ; i >= 0 ; i--) {
			if (checkNextIth(record, i, array[i])) {
				record[i] = true;
			}
			else {
				record[i] = false;
			}
		}
		return record[0] == true;
	}
	
	private static boolean checkNextIth(boolean[] record, int cur, int next) {
		for(int i = cur + 1; i <= cur + next; i++) {
			if (record[cur]) {
				return true;
			}
		}
		return false;
	}

}
