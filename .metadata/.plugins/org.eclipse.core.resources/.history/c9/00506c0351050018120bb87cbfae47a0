
public class Solution1 {
	  //lchild: it will get the maximum path from left subtree [any node to the root];
	  //rchild: it will get the maximum path from right subtree [any node to the roog];
	  //current: choose the maxmum from left or right. 
	  public int maxPathSum(TreeNode root) {
	    int[] max = new int[]{Integer.MIN_VALUE};
	    maxPathSum(root, max);
	    return max[0];
	  }
	  
	  private int maxPathSum(TreeNode root, int[] max) {
	    if (root == null) {
	      return 0;
	    }
	    int leftChild = maxPathSum(root.left, max);
	    int rightChild = maxPathSum(root.right, max);
	    int current = leftChild < 0 ? 0 : leftChild + rightChild < 0 ? 0 : rightChild + root.key;
	    max[0] = Math.max(max[0], current);
	    return Math.max(leftChild < 0 ? 0 : leftChild, rightChild < 0 ? 0 : rightChild) + root.key;
	  }
}
