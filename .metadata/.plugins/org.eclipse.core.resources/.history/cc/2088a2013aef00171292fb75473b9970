
public class Solution3 {

	public static void main(String[] args) {
		int[][] input  = {{1,1,1,0,1},{1,0,1,1,1},{1,1,1,1,1},{1,0,1,1,0},{0,0,1,1,0}};
		System.out.println(largest(input));
	}
	/**
	 * dpLeftUp[0][0] = matrix[0][0];
	 * dpLeftUp[i][0] = matrix[i][0];
	 * dpLeftUp[0][j] = matrix[0][j];
	 * dpRightDown[0][0] = matrix[0][0];
	 * dpRightDown [i][0] = matrix[i][0];
	 * dpRightDown [0][j] = matrix[0][j];
	 * 
	 * Induction Rules:
	 * dpLeft[i][j] represents the maximum consecutive 1s for left side of cross 1s in ith jth;
	 * dpLeft[i][j] = dpLeft [i-1][j] + 1	where maxtrix[i][j]=1;  
	 * dpLeft[i][j] = 0	otherwise;
	 * dpUp[i][j] represents the maximum consecutive 1s for Up side of cross 1s in ith jth;
	 * dpUp[i][j] = dpUp [i][j-1] + 1	where maxtrix[i][j]=1;  
	 * dpUp[i][j] = 0	otherwise;
	 * dpRight[i][j] represents the maximum consecutive 1s for right side of cross 1s in ith jth;
	 * dpRight[i][j] = dpRight [i-1][j] + 1	where maxtrix[i][j]=1;  
	 * dpRight[i][j] = 0	otherwise;
	 * dpDown[i][j] represents the maximum consecutive 1s for down side of cross 1s in ith jth;
	 * dpDown[i][j] = dpDown [i][j-1] + 1	where maxtrix[i][j]=1;  
	 * dpDown[i][j] = 0	otherwise;
	 * @param matrix
	 * @return
	 */
	public static int largest(int[][] matrix) {
		int rows = matrix.length;
		if (rows == 0) {
			return 0;
		}
		int cols = matrix[0].length;
		if (cols == 0) {
			return 0;
		}
		
		int[][] dpLeftUp = doLeftUp(matrix, rows, cols);
		int[][] dpRightDown = doRightDown(matrix, rows, cols);
		
		int max = 0;
		for (int i = 0 ; i < rows ; i++) {
			for (int j = 0; j<cols ; j++) {
				max = Math.max(max, Math.min(dpLeftUp[i][j], dpRightDown[i][j]));
			}
		}
		return max;
	}
	
	private static int[][] doLeftUp(int[][] matrix, int rows, int cols){
		int[][] dpLeft = new int[rows][cols];
		int[][] dpRight = new int[rows][cols];
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j< cols; j++) {
				if (i == 0 || j == 0) {
					dpLeftUp[i][j] = matrix[i][j];
				} else {
					if (matrix[i][j] == 1) {
						dpLeftUp[i][j] = Math.min(dpLeftUp[i - 1][j], dpLeftUp[i][j -1]) + 1;
					} else {
						dpLeftUp[i][j] = 0;
					}
					
				}
			}
		}
		return dpLeftUp;
	}
	
	private static int[][] doRightDown(int[][] matrix, int rows, int cols){
		int[][] dpRightDown = new int[rows][cols];
		for (int i = rows - 1 ; i >= 0 ; i--) {
			for (int j = cols - 1 ; j >= 0 ; j--) {
				if (i == rows -1 || j == cols - 1) {
					dpRightDown[i][j] = matrix[i][j];
				} else {
					if (matrix[i][j] == 1) {
						dpRightDown[i][j] = Math.min(dpRightDown[i + 1][j], dpRightDown[i][j + 1]) + 1;
					} else {
						dpRightDown[i][j] = 0;
					}
				}
			}
		}
		return dpRightDown;
	}
	
	private static int merge(int[][] m1, int[][] m2, int rows, int cols) {
		int max = 0;
		for(int i = 0 ; i < rows ; i++) {
			for (int j = 0 ; j < cols ; j++) {
				m1[i][j] = Math.min(m1[i][j], m2[i][j]);
				max = Math.max(max, m1[i][j]);
			}
		}
		return max;
	}
	
}
