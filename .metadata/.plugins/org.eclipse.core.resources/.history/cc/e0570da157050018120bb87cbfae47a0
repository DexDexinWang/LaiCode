import generator.TreeNode;
public class Solution2 {
	/*
	Given a binary tree in which each node contains an integer number. 
	Find the maximum possible subpath sum(both the starting and ending node of the 
	subpath should be on the same path from root to one of the leaf nodes, 
	and the subpath is allowed to contain only one node).
	 */
	
	  //dp[0] = root.key;
	  //dp[i] represents the maximum path form root to current node.
	  //dp[i] = root.key                  dp[i - 1] < 0;
	  //dp[i] = dp[i-1] + root.key        otherwise;
	  public int maxPathSum(TreeNode root) {
	    int[] max = new int[]{Integer.MIN_VALUE};
	    maxPathSum(root, max, 0);
	    return max[0];
	  }
	  
	  public void maxPathSum(TreeNode root, int[] max, int prevSum) {
	    if (root == null) {
	      return;
	    }
	    prevSum = prevSum < 0 ? root.key : prevSum + root.key;
	    max[0] = Math.max(max[0], prevSum);
	    maxPathSum(root.left, max, prevSum);
	    maxPathSum(root.right, max, prevSum);
	  }
}
