import generator.TreeNode;
public class Solution1 {
	  //lchild: it will get the maximum path from left subtree [any node to the root];
	  //rchild: it will get the maximum path from right subtree [any node to the roog];
	  //current: choose the maxmum from left or right. 
	  public int maxPathSum1(TreeNode root) {
	    int[] max = new int[]{Integer.MIN_VALUE};
	    maxPathSum(root, max);
	    return max[0];
	  }
	  
	  private int maxPathSum1(TreeNode root, int[] max) {
	    if (root == null) {
	      return 0;
	    }
	    int leftChild = maxPathSum1(root.left, max);
	    int rightChild = maxPathSum1(root.right, max);
	    int current = leftChild < 0 ? 0 : leftChild + rightChild < 0 ? 0 : rightChild + root.key;
	    max[0] = Math.max(max[0], current);
	    return Math.max(leftChild < 0 ? 0 : leftChild, rightChild < 0 ? 0 : rightChild) + root.key;
	  }
	  
	  
	  
		  public int maxPathSum(TreeNode root) {
		    // Write your solution here.
		    if (root == null) {
		      return 0;
		    }
		    int[] max = new int[] {Integer.MIN_VALUE};
		    helper(root, max);
		    return max[0];
		  }
		  private int helper(TreeNode root, int[] max) {
		    if (root == null) {
		      return 0;
		    }
		    int left = Math.max(helper(root.left, max), 0);
		    int right = Math.max(helper(root.right, max), 0);
		    max[0] = Math.max(max[0], root.key + left + right);
		    return root.key + Math.max(left, right);
		  }
		

}
