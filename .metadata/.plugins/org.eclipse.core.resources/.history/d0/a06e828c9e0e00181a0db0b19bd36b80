import java.util.Deque;
import java.util.LinkedList;

import generator.TreeNode;
import generator.TreeRandom;
public class PrintAllPathes {

	public static void main(String[] args) {
		TreeNode input = TreeRandom.treeGenRange(3, null, 0, 10);
		input.print();
		printAllPathes(input);
	}
	//solve the problem by post order traversal with previous node and current node. 
	//1. prev = null, root, go down.
	//2. prev = parent, go down.
	//3. prev = left or right, go up.
	private static void printAllPathes(TreeNode root) {
		if (root == null) {
			return;
		}
		TreeNode prev = null;
		Deque<TreeNode> stack = new LinkedList<TreeNode>();
		stack.offer(root);
		StringBuilder sb = new StringBuilder();
		sb.append(root.key);
		String str = "";
		while(!stack.isEmpty()) {
			TreeNode cur = stack.peek();
			if (prev == null || prev.left == cur || prev.right == cur) {
				if (cur.left != null) {
					stack.push(cur.left);
					str = " - " + cur.left.key;
					sb.append(str);
				} else if (cur.right != null) {
					stack.push(cur.right);
					str = " - " + cur.right.key;
					sb.append(str);
				} else {
					System.out.println(sb.toString());
					stack.poll();
					sb.deleteCharAt(sb.length() - 1);
				}	
			} else if (cur.left == prev) {
				if (cur.right != null) {
					stack.push(cur.right);
					str = " - " + cur.right.key;
					sb.append(str);
				} else {
					stack.poll();
					sb.deleteCharAt(sb.length() - 1);
				}
			} else {
				stack.poll();
				sb.deleteCharAt(sb.length() - 1);
			}
			prev = cur;
		}
	}
	
}
