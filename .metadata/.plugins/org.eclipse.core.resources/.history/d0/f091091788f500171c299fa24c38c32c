import java.util.Arrays;

public class Solution2 {
	public static void main(String[] args) {
		int[] input = {1,1,1,2,2,3,3};
		System.out.println(Arrays.toString(dedup(input)));
	}
	/*
	 Given a sorted integer array, remove duplicate elements. 
	 For each group of elements with the same value keep at most two of them. 
	 Do this in-place, using the left side of the original array and maintain the 
	 relative order of the elements of the array. Return the array after deduplication.
	*/
	//approach: traverse all eles from left to right with two pointers, slow and fast;
	//slow: all eles to the left side of slow (include slow) are the final result to return.
	//fast: all eles to the right side of fast (include fast) will be processed.
	//others are not useful.
	  public static int[] dedup(int[] array) {
		    if (array.length <= 2) {
		      return array;
		    }
		    int slow = 1;
		    int fast = 2;
		    while (fast < array.length) {
		      if (array[fast] == array [slow - 1]) {
		        fast++;
		        continue;
		      }
		      array[++slow] = array[fast++];
		    }
		    return Arrays.copyOf(array, slow + 1);
		  }

}
