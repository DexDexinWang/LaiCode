import java.util.PriorityQueue;

public class Solution3 {

	public static void main(String[] args) {
		int[][] input = {{},{1,5,7},{4},{2,3,5,11},{2,4,4,6,8}};
		System.out.println(merge(input));
	}
	  //approach: use priority queue to solve this problem;
	  public static int[] merge(int[][] arrayOfArrays) {
		    int rows = arrayOfArrays.length;
		    int total = 0;
		    PriorityQueue<Unit> minHeap = new PriorityQueue<Unit>(rows);
		    for (int i = 0; i < rows; i++) {
		      total += arrayOfArrays[i].length;
		      if (arrayOfArrays[i].length == 0) {
		        continue;
		      }
		      minHeap.offer(new Unit(i,0,arrayOfArrays[i][0]));
		    }
		    
		    int[] res = new int[total];
		    for (int i = 0; i < total; i++) {
		      Unit cur = minHeap.poll();
		      res[i] = cur.val;
		      if (cur.col < arrayOfArrays[cur.row].length - 1) {
		        minHeap.offer(new Unit(cur.row, cur.col + 1, 
		                              arrayOfArrays[cur.row][cur.col + 1]));
		      } 
		    }
		    return res;
		  }
	  public int[] merge2(int[][] arrayOfArrays) {
		    //corner case
		    int rows = arrayOfArrays.length;
		    if (rows == 0) {
		      return new int[0];
		    }
		    //define the total space that we will use to store final result;
		    int total = 0; 
		    //define a priority queue to get the min value from all sorted array.
		    PriorityQueue<Unit> minHeap = new PriorityQueue<>(rows);
		    //put all smallest elements from sorted array 
		    for (int i = 0; i < rows ; i++) {
		      if (arrayOfArrays[i].length != 0) {
		        minHeap.offer(new Unit(i, 0, arrayOfArrays[i][0]);
		        total++;
		      }
		    }
		    //define the result array;
		    int[] res = new int[total];
		    int index = 0; 
		    while (!minHeap.isEmpty()) {
		      Unit cur = minHeap.poll()();
		      res[index] = cur.val;
		      if (cur.col + 1 < arrayOfArrays[cur.row].length) {
		        minHeap.offer(new Unit(cur.row, cur.col + 1, arrayOfArrays[cur.row][cur.col + 1]);
		      }
		    }
		    return res;
		  }
		   
		static class Unit implements Comparable<Unit> {
		    int row;
		    int col;
		    int val;
		    public Unit(int row, int col, int val) {
		      this.row = row;
		      this.col = col;
		      this.val = val;
		    }
		    @Override
		    public int compareTo(Unit other) {
		      if (this.val == other.val) {
		        return 0;
		      }
		      return this.val < other.val ? -1 : 1;
		    }
		  }
		//Time complexity: O(n*logK); where k is the number of rows;
		//Space complexity: O(k);
}
