import java.util.ArrayList;
import java.util.List;

public class Solution6 {
	public static void main(String[] args) {

	}
	
	private static final char EQUIP = 'E';
	private static final char OB = 'O';

	public List<Integer> putChair(char[][] gym) {
		int M = gym.length;
		int N = gym[0].length;
		int[][] cost = new int[M][N];
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if (EQUIP == gym[i][j]) {
					if (!addCost(cost, gym, i,j)) {
						return null;
					}
				}
			}
		}
	}
	
	private boolean addCost(int[][] cost, char[][] gym, int i, int j) {
		boolean[][] visited = new boolean[gym.length][gym[0].length];
		int pathCost = 1£»
	}
	
	private List<Pair> getNeis(Pair cur, char[][] gym) {
		int x = cur.i;
		int y = cur.j;
		int M = gym.length;
		int N = gym[0].length;
		List<Pair> neis = new ArrayList<>();
		if (x + 1 < M && OB != gym[x + 1][y]) {
			neis.add(new Pair(x + 1, y));
		}
		
		if (y + 1 < N && OB != gym[x][y + 1]) {
			neis.add(new Pair(x, y + 1));
		}
		
		if (x - 1 >= M && OB != gym[x - 1][y]) {
			neis.add(new Pair(x - 1, y));
		}
		
		if (y - 1 >= 0 && OB != gym[x][y - 1]) {
			neis.add(new Pair(x, y - 1));
		}
		return neis;
	}
	
	
	static class Pair {
		int i;
		int j;
		Pair(int i, int j) {
			this.i = i;
			this.j = j;
		}
	}
	
}
